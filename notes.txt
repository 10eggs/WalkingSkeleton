ctrl+shift+D - debugging
ctrl+p - navigation
ctrl+. - autofix
nuget gallery in navigation window 
dotnet watch run - to run application with watch run mode 
ctrl+p
ctrl+shift+p


$dotnet --info //versions
$dotnet --h //help
$dotnet new -l //list all available applications
$dotnet new <typeofproject eg. webapi> -n <name> //
$dotnet new classlib -n Application
$dotnet new classlib -n Persistance

#references
$dotnet sln add API/API.csproj
$dotnet sln add Application
$dotnet sln add Domain


#Impicit 'using' feature is enabeled for API project in API.csproj, it gives us ability to use one single using statement across
#whole project, instead of having 'using' lines at the top of every file which use this package

#Another setting is Nullable enabled
#Question mark after every declaration where property may be a null object


#TIP: ctrl + , to show settings, then use exclude files to remove it from explorer
#By default we've got launchBrowser in launchSettings.json set on true - to disable it we need to set in on false
#dotnet run or dotnet watch run
#dotnet webserver is called KESTREL

#Startup class is used by main method to tell application what it should start.
#Additionally there are two appsettings files - one is appsettings.Development applied just to dev environment,
#next is appsettings applied to the main method regardless which environment are we working on
#We've got a Startup constructor where we are injecting IConfiguration file - by using this we've got access to whole
#settings file inside our startup class

#We are refeering to square bracket as an 'attributes'
#In Route attribute we've got this placeholder '[controller]' - this allows us to use controler name as a patch

#DbContext represent session of the database - combination of unit of work and repository pattern
#TIP: Use ctrl + . to do quickfix

#Default option for IConfiguration is public property. In our case we will opt for another way to do this

#TIP: dotnet tool list --global
#dotnet ef migrations add <migrationName> -p <projectname_where_thecontext_is> -s <startup project> 

#dotnet ef database -h
#dotnet new gitignore



#CREATE REACT Application
$node --version

#Reviewing React project files
#In JSX you can not assign class to html element as u usually do
#You need to pass it as an object into curly bracket


#How to handle gitignore
$dotnet new gitignore
//ctrl+shift+l - underline all occurance of highlighted word 


///
#Repository Pattern may be added at some point
//Add MediatR - provide assembly where your handlers live
//When you need populate query from route - use attribute [FromBody] [FromQuery]
//MediatorPipe
//IPipelieMediator - do something with message that is coming in

//Inline styling in react is different than inline styling in raw html
//JSX component returned from the function needs to be in <> or in <React.Fragment>

    
//Problem with file extension:
//https://stackoverflow.com/questions/62059408/reactjs-and-typescript-refers-to-a-value-but-is-being-used-as-a-type-here-ts

//We are passing activities array to the component. To do that we can do either pass props as an argument and get activities from props.activities
//Or we can destruct activities directly from Props type - ({activties}:Props)

//x && y - right hand is executed when x isnt null or undefined
//semantic-ui - fluid class allows to use max space for the element
//

// <Button onClick={selectActivity(activity.id)} - this will try to run selectActivity function as soon as component will be rendered
// <Button onClick={() => selectActivity(activity.id)} - this is valid implementation
// <Button onClick={cancelSelectActivity}basic color='grey' content='Cancel'></Button> - also this is valid as handler does not require any arguments




//To be able to track form value we need to add some parameters to our input element
//props are 'value' and 'name'
//Adding property of value is breaking ability to edit an input field
//To have this ability again we need to add onChange event handler




//const {name,value} = event.target;
//setActivity({...activity, [name]:value})
//<Form.Input placeholder='Title' value={activity.title} name='title' onChange={handleInputChange} />

//To target property which matches this 'name' value, we need to use square bracket
//property with key of the 'name' should be set to whatever value is

//